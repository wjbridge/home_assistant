script:

  ####################################################
  #                                                  #
  #                      SCRIPT                      #
  #                                                  #
  ####################################################

  alexa_fan_sounds:
    mode: queued
    description: "Turn On/Off Alexa Fans Sounds"
    fields:
      alexa_device:
        description: "The media device"
      bool_fan:
        description: "Turn Fan On/Off"
    sequence:
      - service: media_player.play_media
        data_template:
          entity_id: '{{ alexa_device }}'
          media_content_id: >
            {% if bool_fan == true %}
              amzn1.ask.skill.a5d12421-cbba-465b-9a9d-3495e2dc5e37
            {% else %}
              'cancel'
            {% endif %}
          media_content_type: >
            {% if bool_fan == true %}
              skill
            {% else %}
              custom
            {% endif %}
      - delay:
          seconds: 3

  docker_vpn_restart:
    mode: queued
    sequence:
      - service: browser_mod.toast
        data:
          duration: 16000
          message: Restarting VPN container...
      - service: monitor_docker.restart
        data:
          name: 'vpn'
      - delay:
          seconds: 10
      - service: monitor_docker.restart
        data:
          name: 'nzbget'
      - delay:
          seconds: 2
      - service: monitor_docker.restart
        data:
          name: 'nzbhydra'
      - delay:
          seconds: 2
      - service: monitor_docker.restart
        data:
          name: 'speedtest_vpn'
      - delay:
          seconds: 2
      - service: monitor_docker.restart
        data:
          name: 'youtubedl'
      - service: browser_mod.toast
        data:
          duration: 16000
          message: Restarting complete...

  display_video_popup_on_tv:
    alias: Display Video PIP Popup on TV
    mode: single
    variables:
      link_id: '{% for _ in range(40) %}{{ range(10)|random }}{% endfor %}'
    fields:
      ip_addr:
        description: "Ip Address of the Nvidia Shield"
      camera:
        description: "Camera ID"
      msg:
        description: "Message to display"
      msg_title:
        description: "Message title to display"
    sequence:
      - service: webrtc.create_link
        data:
          link_id: '{{ link_id }}'
          entity: '{{ camera }}'
          open_limit: 0
          time_to_live: 60
      - service: rest_command.pipup_url_on_tv
        data:
          ipaddress: '{{ ip_addr }}'
          title: '{{ msg_title }}'
          message: '{{ msg }}'
          url: https://homeassistant.bridgehacker.com/webrtc/embed?url={{ link_id }}&webrtc=true

  display_image_popup_on_tv:
    alias: Display Image PIP Popup on TV
    mode: single
    fields:
      ip_addr:
        description: "Ip Address of the Nvidia Shield"
      msg:
        description: "Message to display"
      msg_title:
        description: "Message title to display"
      img_url:
        description: "The image URL to display"
    sequence:
      - service: rest_command.pipup_url_on_tv
        data:
          ipaddress: '{{ ip_addr }}'
          title: '{{ msg_title }}'
          message: '{{ msg }}'
          url: '{{ img_url }}'